# coding: utf-8

"""
    Visier Permission Management APIs

    Visier APIs for managing permissions within an organization

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from visier_permission_management_python_sdk.pydantic.inherited_access_config_dto import InheritedAccessConfigDTO
from visier_permission_management_python_sdk.pydantic.member_filter_config_dto import MemberFilterConfigDTO
from visier_permission_management_python_sdk.pydantic.property_set_config_dto import PropertySetConfigDTO

class DataSecurityProfileDTO(BaseModel):
    # The analytic object ID associated with the data security profile.
    analytic_object_id: typing.Optional[str] = Field(None, alias='analyticObjectId')

    # The property set configuration that defines which properties and access level to allow for each filtered record.
    property_set_config: typing.Optional[PropertySetConfigDTO] = Field(None, alias='propertySetConfig')

    # The flag for giving all access to data points when creating a population.
    all_data_point_access: typing.Optional[bool] = Field(None, alias='allDataPointAccess')

    # The member filter configurations that defines the population.
    member_filter_configs: typing.Optional[typing.List[MemberFilterConfigDTO]] = Field(None, alias='memberFilterConfigs')

    # A list of objects representing the inherited access configurations associated with the data security profile.  By default all related objects of a top level analytic object will inherit access.  To remove access to a related analytic object, add it to the list of inherited access configurations with removeAccess: true.  To add custom filters to a related analytic object, add the analytic object to the list of inherited access configurations and then add the custom filters to its list of member filter configurations.
    inherited_access_configs: typing.Optional[typing.List[InheritedAccessConfigDTO]] = Field(None, alias='inheritedAccessConfigs')
    class Config:
        arbitrary_types_allowed = True
