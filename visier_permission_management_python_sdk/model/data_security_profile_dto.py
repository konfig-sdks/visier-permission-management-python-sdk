# coding: utf-8

"""
    Visier Permission Management APIs

    Visier APIs for managing permissions within an organization

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_permission_management_python_sdk import schemas  # noqa: F401


class DataSecurityProfileDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            analyticObjectId = schemas.StrSchema
        
            @staticmethod
            def propertySetConfig() -> typing.Type['PropertySetConfigDTO']:
                return PropertySetConfigDTO
            allDataPointAccess = schemas.BoolSchema
            
            
            class memberFilterConfigs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MemberFilterConfigDTO']:
                        return MemberFilterConfigDTO
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MemberFilterConfigDTO'], typing.List['MemberFilterConfigDTO']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'memberFilterConfigs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MemberFilterConfigDTO':
                    return super().__getitem__(i)
            
            
            class inheritedAccessConfigs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InheritedAccessConfigDTO']:
                        return InheritedAccessConfigDTO
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InheritedAccessConfigDTO'], typing.List['InheritedAccessConfigDTO']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inheritedAccessConfigs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InheritedAccessConfigDTO':
                    return super().__getitem__(i)
            __annotations__ = {
                "analyticObjectId": analyticObjectId,
                "propertySetConfig": propertySetConfig,
                "allDataPointAccess": allDataPointAccess,
                "memberFilterConfigs": memberFilterConfigs,
                "inheritedAccessConfigs": inheritedAccessConfigs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyticObjectId"]) -> MetaOapg.properties.analyticObjectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertySetConfig"]) -> 'PropertySetConfigDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allDataPointAccess"]) -> MetaOapg.properties.allDataPointAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memberFilterConfigs"]) -> MetaOapg.properties.memberFilterConfigs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inheritedAccessConfigs"]) -> MetaOapg.properties.inheritedAccessConfigs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["analyticObjectId", "propertySetConfig", "allDataPointAccess", "memberFilterConfigs", "inheritedAccessConfigs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyticObjectId"]) -> typing.Union[MetaOapg.properties.analyticObjectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertySetConfig"]) -> typing.Union['PropertySetConfigDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allDataPointAccess"]) -> typing.Union[MetaOapg.properties.allDataPointAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memberFilterConfigs"]) -> typing.Union[MetaOapg.properties.memberFilterConfigs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inheritedAccessConfigs"]) -> typing.Union[MetaOapg.properties.inheritedAccessConfigs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["analyticObjectId", "propertySetConfig", "allDataPointAccess", "memberFilterConfigs", "inheritedAccessConfigs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        analyticObjectId: typing.Union[MetaOapg.properties.analyticObjectId, str, schemas.Unset] = schemas.unset,
        propertySetConfig: typing.Union['PropertySetConfigDTO', schemas.Unset] = schemas.unset,
        allDataPointAccess: typing.Union[MetaOapg.properties.allDataPointAccess, bool, schemas.Unset] = schemas.unset,
        memberFilterConfigs: typing.Union[MetaOapg.properties.memberFilterConfigs, list, tuple, schemas.Unset] = schemas.unset,
        inheritedAccessConfigs: typing.Union[MetaOapg.properties.inheritedAccessConfigs, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataSecurityProfileDTO':
        return super().__new__(
            cls,
            *args,
            analyticObjectId=analyticObjectId,
            propertySetConfig=propertySetConfig,
            allDataPointAccess=allDataPointAccess,
            memberFilterConfigs=memberFilterConfigs,
            inheritedAccessConfigs=inheritedAccessConfigs,
            _configuration=_configuration,
            **kwargs,
        )

from visier_permission_management_python_sdk.model.inherited_access_config_dto import InheritedAccessConfigDTO
from visier_permission_management_python_sdk.model.member_filter_config_dto import MemberFilterConfigDTO
from visier_permission_management_python_sdk.model.property_set_config_dto import PropertySetConfigDTO
