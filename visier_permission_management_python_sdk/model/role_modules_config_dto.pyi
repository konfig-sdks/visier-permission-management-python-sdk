# coding: utf-8

"""
    Visier Permission Management APIs

    Visier APIs for managing permissions within an organization

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_permission_management_python_sdk import schemas  # noqa: F401


class RoleModulesConfigDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def contentPackageIds() -> typing.Type['RoleModulesConfigDTOContentPackageIds']:
                return RoleModulesConfigDTOContentPackageIds
            __annotations__ = {
                "contentPackageIds": contentPackageIds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentPackageIds"]) -> 'RoleModulesConfigDTOContentPackageIds': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contentPackageIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentPackageIds"]) -> typing.Union['RoleModulesConfigDTOContentPackageIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contentPackageIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contentPackageIds: typing.Union['RoleModulesConfigDTOContentPackageIds', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RoleModulesConfigDTO':
        return super().__new__(
            cls,
            *args,
            contentPackageIds=contentPackageIds,
            _configuration=_configuration,
            **kwargs,
        )

from visier_permission_management_python_sdk.model.role_modules_config_dto_content_package_ids import RoleModulesConfigDTOContentPackageIds
