# coding: utf-8

"""
    Visier Permission Management APIs

    Visier APIs for managing permissions within an organization

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_permission_management_python_sdk import schemas  # noqa: F401


class PropertyAccessConfigDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            propertyId = schemas.StrSchema
            analyticObjectId = schemas.StrSchema
        
            @staticmethod
            def analyticObjectReferencePaths() -> typing.Type['PropertyAccessConfigDTOAnalyticObjectReferencePaths']:
                return PropertyAccessConfigDTOAnalyticObjectReferencePaths
            
            
            class accessLevel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'enum'
                    enum_value_to_name = {
                        "None": "NONE",
                        "Aggregate": "AGGREGATE",
                        "Detailed": "DETAILED",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def AGGREGATE(cls):
                    return cls("Aggregate")
                
                @schemas.classproperty
                def DETAILED(cls):
                    return cls("Detailed")
            __annotations__ = {
                "propertyId": propertyId,
                "analyticObjectId": analyticObjectId,
                "analyticObjectReferencePaths": analyticObjectReferencePaths,
                "accessLevel": accessLevel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["propertyId"]) -> MetaOapg.properties.propertyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyticObjectId"]) -> MetaOapg.properties.analyticObjectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyticObjectReferencePaths"]) -> 'PropertyAccessConfigDTOAnalyticObjectReferencePaths': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessLevel"]) -> MetaOapg.properties.accessLevel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["propertyId", "analyticObjectId", "analyticObjectReferencePaths", "accessLevel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["propertyId"]) -> typing.Union[MetaOapg.properties.propertyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyticObjectId"]) -> typing.Union[MetaOapg.properties.analyticObjectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyticObjectReferencePaths"]) -> typing.Union['PropertyAccessConfigDTOAnalyticObjectReferencePaths', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessLevel"]) -> typing.Union[MetaOapg.properties.accessLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["propertyId", "analyticObjectId", "analyticObjectReferencePaths", "accessLevel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        propertyId: typing.Union[MetaOapg.properties.propertyId, str, schemas.Unset] = schemas.unset,
        analyticObjectId: typing.Union[MetaOapg.properties.analyticObjectId, str, schemas.Unset] = schemas.unset,
        analyticObjectReferencePaths: typing.Union['PropertyAccessConfigDTOAnalyticObjectReferencePaths', schemas.Unset] = schemas.unset,
        accessLevel: typing.Union[MetaOapg.properties.accessLevel, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PropertyAccessConfigDTO':
        return super().__new__(
            cls,
            *args,
            propertyId=propertyId,
            analyticObjectId=analyticObjectId,
            analyticObjectReferencePaths=analyticObjectReferencePaths,
            accessLevel=accessLevel,
            _configuration=_configuration,
            **kwargs,
        )

from visier_permission_management_python_sdk.model.property_access_config_dto_analytic_object_reference_paths import PropertyAccessConfigDTOAnalyticObjectReferencePaths
