# coding: utf-8

"""
    Visier Permission Management APIs

    Visier APIs for managing permissions within an organization

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_permission_management_python_sdk import schemas  # noqa: F401


class PermissionDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            permissionId = schemas.StrSchema
            displayName = schemas.StrSchema
            
            
            class dataSecurityProfiles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataSecurityProfileDTO']:
                        return DataSecurityProfileDTO
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DataSecurityProfileDTO'], typing.List['DataSecurityProfileDTO']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataSecurityProfiles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataSecurityProfileDTO':
                    return super().__getitem__(i)
        
            @staticmethod
            def adminCapabilityConfig() -> typing.Type['AdminCapabilityConfigDTO']:
                return AdminCapabilityConfigDTO
        
            @staticmethod
            def roleModulesConfig() -> typing.Type['RoleModulesConfigDTO']:
                return RoleModulesConfigDTO
            __annotations__ = {
                "description": description,
                "permissionId": permissionId,
                "displayName": displayName,
                "dataSecurityProfiles": dataSecurityProfiles,
                "adminCapabilityConfig": adminCapabilityConfig,
                "roleModulesConfig": roleModulesConfig,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissionId"]) -> MetaOapg.properties.permissionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSecurityProfiles"]) -> MetaOapg.properties.dataSecurityProfiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminCapabilityConfig"]) -> 'AdminCapabilityConfigDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleModulesConfig"]) -> 'RoleModulesConfigDTO': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "permissionId", "displayName", "dataSecurityProfiles", "adminCapabilityConfig", "roleModulesConfig", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissionId"]) -> typing.Union[MetaOapg.properties.permissionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSecurityProfiles"]) -> typing.Union[MetaOapg.properties.dataSecurityProfiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminCapabilityConfig"]) -> typing.Union['AdminCapabilityConfigDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleModulesConfig"]) -> typing.Union['RoleModulesConfigDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "permissionId", "displayName", "dataSecurityProfiles", "adminCapabilityConfig", "roleModulesConfig", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        permissionId: typing.Union[MetaOapg.properties.permissionId, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        dataSecurityProfiles: typing.Union[MetaOapg.properties.dataSecurityProfiles, list, tuple, schemas.Unset] = schemas.unset,
        adminCapabilityConfig: typing.Union['AdminCapabilityConfigDTO', schemas.Unset] = schemas.unset,
        roleModulesConfig: typing.Union['RoleModulesConfigDTO', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PermissionDTO':
        return super().__new__(
            cls,
            *args,
            description=description,
            permissionId=permissionId,
            displayName=displayName,
            dataSecurityProfiles=dataSecurityProfiles,
            adminCapabilityConfig=adminCapabilityConfig,
            roleModulesConfig=roleModulesConfig,
            _configuration=_configuration,
            **kwargs,
        )

from visier_permission_management_python_sdk.model.admin_capability_config_dto import AdminCapabilityConfigDTO
from visier_permission_management_python_sdk.model.data_security_profile_dto import DataSecurityProfileDTO
from visier_permission_management_python_sdk.model.role_modules_config_dto import RoleModulesConfigDTO
